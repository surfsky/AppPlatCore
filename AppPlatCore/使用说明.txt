AppBoxCore
基于 FineUICore 的通用权限管理框架，包括用户管理、职称管理、部门管理、角色管理、角色权限管理等模块。


注意：
	1. AppBoxCore作为演示程序，请不要直接用于真实项目。
	2. AppBoxCore作为演示程序，版本之间不兼容，也不支持版本升级。


使用步骤：
	1. 用 VS2019 打开项目工程文件（AppBoxCore.sln）；
	2. 运行（Ctrl+F5）！

	请使用管理员账号登陆（用户名：admin 密码：admin）。
	
	

知识储备：
	1. 本项目采用Entity Framework Core 的Code First开发模式，数据库会在网站第一次运行时自动创建。
	2. 如果尚未安装 .Net Core 3.1，请先安装 SDK：https://dotnet.microsoft.com/download/dotnet-core/3.1




发布历史：


+2020-03-31 v6.2
	-升级到 FineUICore（基础版）v6.2.0。
	-基于 ASP.NET Core 的 RazorPages 和 TagHelpers 技术架构。
	-使用 EntityFramework Core 访问数据库。
	-基于 .Net Core 3.1。
	-部分代码参考网友【时不我待】的实现：https://t.zsxq.com/UBAqN3N
	+功能更新。
		+页面处理器（GET/POST）和数据库操作全部改为异步调用（async/await）。
			-服务器的可用线程是有限的，在高负载情况下的可能所有线程都被占用，此时服务器就无法处理新的请求，直到有线程被释放。 
			-使用同步代码时，可能会出现多个线程被占用而不能执行任何操作的情况，因为它们正在等待 I/O 完成。 
			-使用异步代码时，当线程正在等待 I/O 完成时，服务器可以将其线程释放用于处理其他请求。
		-将基类的ExecuteUpdate、Sort、SortAndPage、Count、FindByID方法全部改为异步调用。
		-增加页面模型基类BaseAdminModel，并设置[Authorize]特性以阻止未登陆用户访问管理页面。
		-页面模型类中，将对ViewBag的调用改为类属性。
		+EFCore不支持没有实体类来表示联接表的多对多关系。
			-无有效负载的多对多联接表有时称为纯联接表 (PureJoinTable)。
			-数据模型开始时很简单，随着内容的增加，纯联接表 (PJT) 通常会发展为有效负载的联接表。
			-新增实体类：RolePower、RoleUser、TitleUser。
			-更新AppBoxCoreContext中的OnModelCreating，包含多对多，一对多，单个导航等定义。
			-更新模型类User，删除Roles和Titles导航属性，新增RoleUsers和TitleUsers导航属性。
		-更新AppBoxCoreDatabaseInitializer，并在程序启用阶段调用（Program.cs）。
		+使用依赖注入添加数据库连接实例。
			-在Startup.cs的ConfigureServices中，通过AddDbContext来注册EFCore服务。
			+在BaseModel.cs类中获取数据库连接实例。
				-FineUICore.PageContext.GetRequestService<AppBoxCoreContext>();
				-由于同时需要在静态函数和实例函数中调用，所以通过当前请求上下文获取服务对象。
				-如果仅需要在实例函数中调用，可以通过类的构造函数注入。
		+在页面初始化查询中，添加对AsNoTracking()的调用。
			-如果返回的实体未在当前上下文中更新（未调用SaveChanges），AsNoTracking方法将会提升性能。
		+由于现在需要用关联表表示多对多关系，所以需要对之前的代码进行重构。
			+重构BaseModel中的GetRolePowerNames方法。
				-db.Roles.Include(r => r.Powers).Where(r => roleIDs.Contains(r.ID)).ToList();
				-改为：
				-db.Roles.Include(r => r.RolePowers).ThenInclude(rp => rp.Power).Where(r => roleIDs.Contains(r.ID)).ToList();
			+重构用户编辑页面初始化代码。
				-DB.Users.Include(u => u.Roles).Where(m => m.ID == id).FirstOrDefault();
				-String.Join(",", CurrentUser.Roles.Select(r => r.Name).ToArray());
				-改为：
				-await DB.Users.Include(u => u.RoleUsers).ThenInclude(ru => ru.Role).Where(m => m.ID == id).FirstOrDefaultAsync();
				-String.Join(",", CurrentUser.RoleUsers.Select(ru => ru.Role.Name).ToArray());
			+重构职称列表页面删除行代码。
				-DB.Users.Where(u => u.Titles.Any(r => r.ID == deletedRowID)).Count();
				-改为：
				-await DB.Users.Where(u => u.TitleUsers.Any(r => r.TitleID == deletedRowID)).CountAsync();
		+更新用户密码页面，设置HiddenField的Name=hfUserID属性，以便在后台通过函数参数获取值。
			-可选实现：设置CurrentUser的[BindProperty]特性，然后通过CurrentUser.ID获取。
			-可选实现：函数参数IFormCollection values，然后通过Convert.ToInt32(values["CurrentUser.ID"].ToString())获取。
		-使用TextBox标签的For属性（For=Title.Name）时，无需设置Required=true和ShowRedStar=true，这两个属性会从Title模型的特性中读取并设置。
		-用户列表页面的触发器输入框，由于设置了OnTrigger2ClickFields=Panel1，因此无需额外传入参数new Parameter("ttbSearchMessage","F.ui.ttbSearchMessage.getValue()")。
		-菜单编辑页面，如果指定的浏览权限名称错误，则弹出框提示（浏览权限 XXX 不存在！）。
		+新增IKey2ID接口。
			-RolePower、RoleUser、TitleUser实现了IKey2ID接口，BaseModel新增AddEntities2、ReplaceEntities2方法。
			+编辑用户页面。
				-ReplaceEntities<Role>(_user.Roles, roleIDs); 改为：ReplaceEntities2<RoleUser>(_user.RoleUsers, roleIDs, _user.ID);
				-_user.Dept = Attach<Dept>(Convert.ToInt32(hfSelectedDept)); 改为：_user.DeptID = Convert.ToInt32(hfSelectedDept); 
			+新增用户页面。
				-AddEntities<Role>(user.Roles, roleIDs); 改为：AddEntities2<RoleUser>(roleIDs, CurrentUser.ID);
		+Menu模型类，Dapper版有ViewPowerName属性，而EFCore版没有ViewPowerName属性。
			+列表页面：
				-EFCore版：<f:RenderField For="Menus.First().ViewPower.Name"></f:RenderField>
				-Dapper版：<f:RenderField For="Menus.First().ViewPowerName"></f:RenderField>
			+编辑页面：
				-EFCore版：<f:TextBox For="Menu.ViewPowerID" Text="@(Model.Menu.ViewPower == null ? "" : Model.Menu.ViewPower.Name)" Name="ViewPowerName"></f:TextBox>
				-Dapper版：<f:TextBox For="Menu.ViewPowerName"></f:TextBox>
			+编辑页面后台：
				-EFCore版：OnPostMenuEdit_btnSaveClose_ClickAsync(string ViewPowerName)
				-Dapper版：OnPostMenuEdit_btnSaveClose_ClickAsync()，通过 Menu.ViewPowerName 获取用户的输入值。




以下为 AppBoxMvc 的更新记录：
=======================================================

+2018-09-20 v5.2
	-升级到FineUIMvc（基础版）v5.2.0。
	-Net Framework框架由4.0升级为4.5.2。
	-修正表格改变每页记录数后，序号列可能显示异常的问题（何少波-3RJIU3F）。
	-系统配置->表格每页显示记录数，由数字输入框改为下拉列表。
	+ORM工具由EntityFramework改为Dapper。
		-简单封装插入和更新：ExecuteInsert，ExecuteUpdate
		-简单封装分页和排序：Count，Sort，SortAndPage



+2018-04-23 v5.0
	-升级到FineUIMvc（基础版）v5.0.0。
	-删除部分列表页面中Form标签的Height和BodyPadding定义。
	-调整弹出窗体高度，以及部分表格列宽度。
	+首页TabStrip增加ShowInkBar=true属性。
		-通过CSS样式去除激活选项卡的背景色。
	-为角色权限管理页面增加右键菜单。



+2018-02-13 v4.1.0
	+FineUIMvc升级为v4.1.0.1。
		-字符串替换：[ui-icon]->[f-icon], [ui-state]->[f-state], [ui-widget]->[f-widget]。
		-更新目录：res/themes。
	+图标字体更新为内置图标字体。
		-IconFont.Home -> IconFont._Home
		-IconFont.Download -> IconFont._Download
		-IconFont.Question -> IconFont._Question
		-IconFont.Bank -> IconFont._Skin
		-IconFont.SignOut -> IconFont._SignOut
		-IconFont.Refresh -> IconFont._Refresh
		-IconFont.Expand -> IconFont._Maximize（f-iconfont-maximize, f-iconfont-restore）
	-后台接受表格字段参数由JArray Grid1_fields改为string[] Grid1_fields。
	-从角色职称部门中移除用户时，接受参数由JArray deletedUserIDs改为string[] deletedUserIDs。
	-添加用户到角色职称部门时，接受参数由JArray selectedRowIDs改为int[] selectedRowIDs。
	-用户列表页面删除用户时，接受参数由JArray deletedRowIDs改为int[] deletedRowIDs。
	+编辑菜单项保存时，出错（The property value of 'Power.ID' on one end of a relationship 
		-do not match the property value of 'Menu.ViewPowerID' on the other end）
		-MenuEdit_btnSaveClose_Click中增加对menu.ViewPowerID的赋值，以及对传入参数ViewPowerName为空的处理。
	-主题仓库增加自定义纯色和自定义背景主题。
	-更新首页标签（Views/Home/Index.cshtml），支持新增的纯色主题和图片背景主题。



+2017-03-13 v1.2.0
	-FineUIMvc升级为v1.2.0。
	-修正改变分页大小时没有更新分页工具栏的问题（jacky_j-9259）。
	-修正菜单管理页面不能将ViewPower设为空的问题（sorachen-9269）。
	-修正弹出窗体可能会出现横向滚动条的问题，需要为顶层面板设置布局（张文-9275）。
	-用户新增和编辑页面可以在弹出窗体中修改角色、部门和职务。
	+修正越权访问页面的问题（龙涛软件-9374）。
		-页面能正确返回[您无权访问此页面！]，但VS调试时报错[服务器无法在发送 HTTP 标头之后追加标头]。
	


+2017-01-12 v1.0.0
	-数据模型增加外键属性，比如User.DeptID属性，并更新AppBoxCore.DapperContext（Map->HasForeignKey）。
	-菜单列表页面增加图标列。
	-两种权限控制方式，CheckPower注解（自定义方法过滤器CheckPowerAttribute）或者CheckPower方法。
	-角色用户页面，角色表格排序后保持之前的选中项。
	-列表页面所有事件（触发输入框、表格排序和分页、每页记录数改变、窗体关闭、行删除）共用一个后台处理函数。
	-自定义视图模型GridPagingInfo，来简化表格分页排序的数据处理和传递。
	-POST方法的安全验证防止跨站请求伪造（CSRF）和过度提交（Over-Posting）。
	-编辑用户数据时更新部分字段，其他编辑是全部更新。
	-实现AppBox v6.0的功能。
	
	
	
以下为 AppBox 的更新记录：
=======================================================

+2016-10-27 v6.0
	-FineUI升级为v6.0.0。
	-首页左侧树控件的EnableIcons设为true。
	-删除表格ClearSelectedRowsAfterPaging属性，请使用ClearSelectionBeforePaging属性。
	-用户编辑时所属角色、部门和职称，改为TwinTriggerBox控件，增加清空图标（JS脚本实现）。



+2014-07-21 v4.1
	-项目更新为.Net40。
	-Entity Framework升级为v6.1。
	-FineUI升级为v4.1.0。
	-如果手风琴内树节点为空，则不显示手风琴项。
	-修正新增菜单时JavaScript错误。
	-为登录后首页的外部面板增加AutoScroll="true"，使其在适当的时候出现纵向滚动条。
	-重构admin/role_power.aspx页面的客户端脚本，使其更简洁和准确。
	-修正对关联属性排序时出错的问题（忽然白发、☆☆αβ☆☆）。
	-修正角色权限管理页面按钮未进行权限管理的问题。
	+优化跨页保持选中项的实现。
		-影响页面role_user_addnew.aspx、dept_user_addnew.aspx、title_user_addnew.aspx。
		-在Page_Load中而不是在控件事件中调用SyncSelectedRowIndexArrayToHiddenField。
	-恢复登录后首页的大标题栏。
	


+2014-03-03 v4.0
	-Entity Framework升级为v6.0（Code First开发模式）。
	-FineUI升级为v4.0正式版。
	-自定义首页顶部工具栏样式（仅用于Neptune主题，按钮背景透明）。
	-更新左右分栏页面样式（注意BodyPadding的使用，例如admin/title_user.aspx页面）。
	-更新配置后，点击确定按钮刷新框架页面。
	-更新角色权限管理页面，优化全选/反选按钮，并增加表格的右键菜单。
	+修正表格PageIndex越界的问题。
		-重现：用户表转到第二页，搜索一个关键字，如果结果只有几个，则显示为空。
		-修正办法：PageBase中SortAndPage方法中对PageIndex的有效性进行验证。
	-添加用户到职称角色部门时可以在用户名、中文名中检索。


	
+2013-08-29 v3.0.2
	-修正每次启用都会重新创建数据库的问题。
	-修正无法添加菜单的问题。
	-修正编辑菜单后不更新菜单列表的问题。
	-修正菜单管理和部门管理中，打开顶级节点修改页面出错的问题。
	-修正菜单管理和部门管理中，删除有子节点的父节点直接报错的问题。
	-左侧菜单列表中，不显示空目录，也不显示拥有空目录的空目录。
	-修正新增权限后，新增的权限不显示在角色权限页面。

	
+2013-08-28 v3.0.1
	-修正每次启用都会重新创建数据库的问题。
	-修正无法添加菜单的问题。
	-修正编辑菜单后不更新菜单列表的问题。

	

+2013-08-28 v3.0
	-基于最新的FineUI v3.3和Entity Framework v5.0（Code First开发模式）。
	-扁平化的权限设计，简单高效易于扩展。
	-修正弹出框高度变小时表单仍然不出现滚动条的问题。
	-超级管理员帐号（admin）不受系统权限控制，默认拥有所有权限。
	-只有超级管理员自己才能编辑自己。
	


+2012-12-17 v2.1
	-修正新增和编辑部门时，无法选择顶级部门的BUG。
	-修正用户表的date类型sqlserver2005无法识别的问题。
	-修正工程的编译错误。
	-修正可以添加重复用户名的用户；用户名不可编辑；性别为必填项。
	-编辑新增菜单时，模块名称只能选择，这个名称是从代码来的。
	
	

+2012-12-09 v2.0
	-配置项增加“菜单样式”和“网站主题”。
	-表格增加“每页记录数”过滤条件。
	-删除“角色菜单管理”菜单，现在从“角色模块管理”获得角色拥有的菜单列表。
	-现在需要在ModuleTypeHelper代码中定义模块的标题；“菜单管理”中的菜单标题可以从模块标题同步过来。
	-一个用户可以属于多个角色；删除角色之前需要先清空属于此角色的用户列表。
	+优化编辑用户和新增用户窗体。
		-性别从下拉列表变为单选框列表。
		-所属角色从下列列表变为触发器输入框，在新窗口中选择用户所属的角色。
		-所属部门从下列列表变为触发器输入框，在新窗口中选择用户所属的部门。
		-增加拥有职称字段，同样为触发器输入框。
	-添加用户到当前角色窗体，可以在表格中跨页选择多个用户。
	-用户表增加了一些字段，比如分机号、住址、身份证号、到职日期等。
	-一个用户只能属于一个部门；删除部门之前需要先清空属于此部门的用户列表。
	-一个用户可以拥有多个职称；删除职称之前需要先清空拥有此职称的用户列表。



+2012-06-24 v1.0
	-第一个正式版本。
	-AppBox为捐赠软件，请捐赠作者来获取全部源代码（http://fineui.com/donate/）。
	

	
+2009-09-26 v0.1.0
	-第一个开源版本。
	



注：AppBox 第一个开源版本于 2009-09-26 发布。
	

---	
Copyright (C) 2008-2020 合肥三生石上软件有限公司