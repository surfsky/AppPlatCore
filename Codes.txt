@page
@using System.Text;
@model App.Pages.AI.JewelsModel
@{
    ViewData["Title"] = "Jewels Classfier";
}

@section head {
    <style type="text/css">
        ul.icons {
            list-style-type: none;
            padding: 0;
            margin: 0;
        }
            ul.icons li {
                display: inline-block;
                margin: 0 10px 10px 0;
                text-align: center;
                border-style: solid;
                border-width: 1px;
                padding: 10px 5px;
                width: 150px;
            }
                ul.icons li img {
                    width: 64px;
                    height: 64px;
                }
                ul.icons li .title {
                    margin-top: 10px;
                }
    </style>
}

@section body {

    <f:SimpleForm ID="SimpleForm1" ShowBorder="false" ShowHeader="false" BodyPadding="10" IsViewPort="true" AutoScroll="true">
        <Items>
            <f:Image ID="imgPhoto" CssClass="photo" ImageUrl="~/res/images/blank.png" ShowEmptyLabel="true" Label="图片"  Width="200" />
            <f:FileUpload ID="filePhoto" ShowEmptyLabel="true" ButtonText="上传图片" ButtonOnly="true" ButtonIcon="ImageAdd" OnFileSelected="@Url.Handler("filePhoto_FileSelected")" OnFileSelectedFields="filePhoto,grid" />

            <f:Grid ID="grid" BoxFlex="1" ShowBorder="true" ShowHeader="false" EnableCheckBoxSelect="true"
                    DataIDField="ID" DataTextField="Name"
                    AllowSorting="false" AllowPaging="false"
                    DataSource="@Model.Results">
                <Columns>
                    <f:RowNumberField EnablePagingNumber="true"></f:RowNumberField>
                    <f:RenderField For="Results.First().Label" Width="300" />
                    <f:RenderField For="Results.First().Score" ExpandUnusedSpace="true" />
                </Columns>
            </f:Grid>
            <f:ContentPanel ID="ContentPanel1" BodyPadding="10" ShowBorder="false" ShowHeader="false">
                @{
                    var sb = new StringBuilder();
                    var iconUrl = Url.Content("~/res/images/empty.png");
                    sb.Append("<ul class=\"icons\">");
                    foreach (string icon in Enum.GetNames(typeof(Icon)))
                    {
                        Icon iconType = (Icon)Enum.Parse(typeof(Icon), icon);
                        if (iconType != Icon.None)
                            iconUrl = Url.Content(IconHelper.GetIconUrl(iconType));

                        sb.AppendFormat("<li class=\"f-state-default\"><img src=\"{0}\"/><div class=\"title\">{1}?w=64</div></li>", iconUrl, icon);
                    }
                    sb.Append("</ul>");
                }
                @Html.Raw(sb.ToString());

            </f:ContentPanel>
        </Items>
    </f:SimpleForm>
}


            <f:ContentPanel ID="ContentPanel1" BodyPadding="10" ShowBorder="false" ShowHeader="false">
                @{
                }
                @Html.Raw(sb.ToString());

            </f:ContentPanel>


            
            <f:Grid ID="grid" BoxFlex="1" ShowBorder="true" ShowHeader="false" EnableCheckBoxSelect="true"
                    DataIDField="ID" DataTextField="Name"
                    AllowSorting="false" AllowPaging="false"
                    DataSource="@Model.Results">
                <Columns>
                    <f:RowNumberField EnablePagingNumber="true"></f:RowNumberField>
                    <f:RenderField For="Results.First().Label" Width="300" />
                    <f:RenderField For="Results.First().Score" ExpandUnusedSpace="true" />
                </Columns>
            </f:Grid>
            <f:HyperLink NavigateUrl="" Text="<img src='/res/images/empty.png' />" EncodeText="false" />
            //
            //UIHelper.Grid("grid").DataSource(this.Results, grid_fields);
        public List<PredicateResult> Results{ get; set; }



        ViewBag.btnClientClick2Script


                /// <summary>获取实例的属性名称列表</summary>
        public static string[] GetProperties(object instance)
        {
            var result = new List<string>();
            foreach (PropertyInfo property in instance.GetType().GetProperties(BindingFlags.Instance | BindingFlags.Public))
            {
                var propertyName = property.Name;
                // NotMapped特性
                var notMappedAttr = property.GetCustomAttribute<NotMappedAttribute>(false);
                if (notMappedAttr == null && propertyName != "ID")
                {
                    result.Add(propertyName);
                }
            }
            return result.ToArray();
        }

        
        //protected void InvalidModelState(ModelStateDictionary state)
        //{
        //    System.Text.StringBuilder sb = new System.Text.StringBuilder();
        //    sb.Append("<ul>");
        //    foreach (var key in state.Keys)
        //    {
        //        //将错误描述添加到sb中
        //        foreach (var error in state[key].Errors)
        //        {
        //            sb.AppendFormat("<li>{0}</li>", error.ErrorMessage);
        //        }
        //    }
        //    sb.Append("</ul>");

        //    Alert.Show(sb.ToString());
        //}



                    User user = await DB.Users
                .Include(u => u.RoleUsers)
                .Where(u => u.Name == userName).AsNoTracking().FirstOrDefaultAsync();

            if (user == null)
                Alert.Show("用户名或密码错误！");
            else
            {
                if (PasswordUtil.ComparePasswords(user.Password, password))
                {
                    if (!user.Enabled)
                        Alert.Show("用户未启用，请联系管理员！");
                    else
                    {
                        await Auth.LoginSuccessAsync(user);
                        return RedirectToPage("/Index");
                    }
                }
                else
                {
                    Alert.Show("用户名或密码错误！");
                }
            }

            return UIHelper.Result();


                <script src="~/res/js/jquery-3.4.1.js"></script>


                                    <f:ContentPanel Height="50">
                        <img name="imgVerify" id="imgVerify"
                             width="100" height="39" alt="点击切换" title="点击切换"
                             style="cursor: grab;"
                             src="/HttpApi/Common/VerifyImage"
                             onclick="resetVerifyImg(); return false;" />
                    </f:ContentPanel>

            //var el1 = document.getElementById("imgVerify-inputEl");
            //var el2 = F.ui.imgVerify.getAttrEl();
            //var el3 = F.ui.imgVerify.el;
            //el4.style.cursor = "pointer";
            //el1.addEventListener('click', function () { alert('hello'); });   //resetVerifyImg()
            //el2.addEventListener('click', resetVerifyImg(), true);  // fail
            //el3.addEventListener('click', resetVerifyImg(), true);  // fail
            //$("#imgVerify-inputEl").on('click', resetVerifyImg());

                        //var el1 = document.getElementById("imgVerify-inputEl");
            //var el2 = F.ui.imgVerify.getAttrEl();
            //el2.attr('src', url);
            //el4.attr('src', url);
            //F.ui.imgVerify.getAttrEl().attr('src', url);
            //$("#imgVerify").attr('src', url);
            //$("#imgVerify-inputEl").attr('src', url);



                        {
                SortField = "UpdateTime",
                SortDirection = "DESC",
                PageIndex = 0,
                PageSize = SiteConfig.Instance.PageSize
            };


       /*
        private static List<Title> GetTitles()
        {
            var titles = new List<Title>()
            {
                new Title()
                {
                    Name = "总经理"
                },
                new Title()
                {
                    Name = "部门经理"
                },
                new Title()
                {
                    Name = "高级工程师"
                },
                new Title()
                {
                    Name = "工程师"
                }
            };

            return titles;
        }

                //[Display(Name = "拥有职称")]
        //public List<TitleUser> TitleUsers { get; set; }
                GetTitles().ForEach(t => context.Titles.Add(t));

                            // 用户的职称列表
            TitleText = CurrentUser.Title; // String.Join(",", CurrentUser.TitleUsers.Select(tu => tu.Title.Name).ToArray());

                //if (!String.IsNullOrEmpty(hfSelectedTitle))
                //{
                //    int[] titleIDs = StringUtil.GetIntArrayFromString(hfSelectedTitle);
                //    AddEntities2<TitleUser>(titleIDs, CurrentUser.ID);
                //}

                                //int[] titleIDs = StringUtil.GetIntArrayFromString(hfSelectedTitle);
                //ReplaceEntities2<TitleUser>(item.TitleUsers, titleIDs, item.ID);

                            <f:TwinTriggerBox ID="tbSelectedTitle" EnableEdit="false" Text="@Model.SelectedTitleNames"
                                Trigger1Icon="Clear" Trigger2Icon="Search" ShowTrigger1="false" ShowTrigger2="true" Label="拥有职称"
                                OnClientTrigger1Click="onSelectedTitleTrigger1Click();"
                                OnClientTrigger2Click="onSelectedTitleTrigger2Click();" 
                                />
                            <f:HiddenField ID="hfSelectedTitle" Text="@Model.SelectedTitleIDs" />

                                    public string SelectedTitleNames { get; set; }
        public string SelectedTitleIDs { get; set; }




                //.Include(u => u.TitleUsers)
                //.ThenInclude(tu => tu.Title)

            // 用户拥有职称
            //SelectedTitleNames = String.Join(",", CurrentUser.TitleUsers.Select(tu => tu.Title.Name).ToArray());
            //SelectedTitleIDs = String.Join(",", CurrentUser.TitleUsers.Select(tu => tu.TitleID).ToArray());


                string physicalPath = "";
                string virtualPath = "";
                            <f:TwinTriggerBox ID="tbSelectedTitle" EnableEdit="false"
                                              Trigger1Icon="Clear" Trigger2Icon="Search" ShowTrigger1="false" ShowTrigger2="true" Label="拥有职称"
                                              OnClientTrigger1Click="onSelectedTitleTrigger1Click();"
                                              OnClientTrigger2Click="onSelectedTitleTrigger2Click();"
                            />
                            <f:HiddenField ID="hfSelectedTitle" />
string hfSelectedTitle, 


        /////////////////////////////////////////////////////

        /////////////////////////////////////////////////////
        function checkSelectedTitleTriggerStatus() {
            if (F.ui.tbSelectedTitle.getValue()) {
                F.ui.tbSelectedTitle.showTrigger1();
            } else {
                F.ui.tbSelectedTitle.hideTrigger1();
            }
        }

        function onSelectedTitleTrigger1Click() {
            F.ui.tbSelectedTitle.setValue('');
            F.ui.hfSelectedTitle.setValue('');
            checkSelectedTitleTriggerStatus();
        }

        function onSelectedTitleTrigger2Click() {
            F.ui.Window1.show(F.baseUrl + 'admin/UserSelectTitle?ids=' + F.ui.hfSelectedTitle.getValue(), '选择用户拥有的职称');
        }

        function updateSelectedTitle(titleNames, titleIDs) {
            F.ui.tbSelectedTitle.setValue(titleNames);
            F.ui.hfSelectedTitle.setValue(titleIDs);
            checkSelectedTitleTriggerStatus();
        }
                    checkSelectedTitleTriggerStatus();

                            //--------------------------------------------------
        // Init
        //--------------------------------------------------
        function checkSelectedTitleTriggerStatus() {
            if (F.ui.tbSelectedTitle.getValue()) {
                F.ui.tbSelectedTitle.showTrigger1();
            } else {
                F.ui.tbSelectedTitle.hideTrigger1();
            }
        }

        function onSelectedTitleTrigger1Click() {
            F.ui.tbSelectedTitle.setValue('');
            F.ui.hfSelectedTitle.setValue('');
            checkSelectedTitleTriggerStatus();
        }

        function onSelectedTitleTrigger2Click() {
            F.ui.Window1.show(F.baseUrl + 'admin/UserSelectTitle?ids=' + F.ui.hfSelectedTitle.getValue(), '选择用户拥有的职称');
        }

        function updateSelectedTitle(titleNames, titleIDs) {
            F.ui.tbSelectedTitle.setValue(titleNames);
            F.ui.hfSelectedTitle.setValue(titleIDs);
            checkSelectedTitleTriggerStatus();
        }

                        new Menu
                        {
                            Name = "职称",
                            SortIndex = 30,
                            Remark = "二级菜单",
                            NavigateUrl = "~/Admin/TitleUser",
                            ImageUrl = "~/res/icon/page.png",
                            ViewPower = context.Powers.Where(p => p.Name == "CoreTitleUserView").FirstOrDefault<Power>()
                        },


                        
<div class="row g-3">
    <div class="col-6 col-sm-4 col-md-3 col-lg-auto"><Button ButtonStyle="ButtonStyle.Round" Color="Color.Primary">主要按钮</Button></div>
    <div class="col-6 col-sm-4 col-md-3 col-lg-auto"><Button ButtonStyle="ButtonStyle.Round" Color="Color.Secondary">次要按钮</Button></div>
    <div class="col-6 col-sm-4 col-md-3 col-lg-auto"><Button ButtonStyle="ButtonStyle.Round" Color="Color.Success">成功按钮</Button></div>
    <div class="col-6 col-sm-4 col-md-3 col-lg-auto"><Button ButtonStyle="ButtonStyle.Round" Color="Color.Danger">危险按钮</Button></div>
    <div class="col-6 col-sm-4 col-md-3 col-lg-auto"><Button ButtonStyle="ButtonStyle.Round" Color="Color.Warning">警告按钮</Button></div>
    <div class="col-6 col-sm-4 col-md-3 col-lg-auto"><Button ButtonStyle="ButtonStyle.Circle" Icon="fa-fw fa-solid fa-cubes"></Button></div>
</div>

<Button Text="异步请求" IsAsync="true" Icon="fa-solid fa-fw fa-font-awesome" OnClick="@ButtonClickAsync" />

<div class="btn-group" role="group">
    <Button Color="Color.Primary">按钮一</Button>
    <Button Color="Color.Success">按钮二</Button>
</div>

<div class="row">
    <div class="col-md-6">
        <Button Text="全屏" OnClick="() => FullScreenService.Toggle()"></Button>
        <FullScreenButton Title="点击进行全屏操作" FullScreenIcon="fa-solid fa-font-awesome" />
    </div>
</div>

<button class="btn btn-primary" @onclick="@ShowMessage">打开消息提示</button>
<Message @ref="Message" Placement="Placement.Bottom" />
    void ButtonClickAsync()
    {
        Task.Delay(5000);
    }

    private async Task ShowMessage()
    {
        Message.SetPlacement(Placement.Top);
        await MessageService.Show(new MessageOption()
            {
                Content = "This is a reminder message"
            });
    }
        private Message？ Message { get; set; }





            "Urls": "http://*:8080",
    "Kestrel": {
        "Endpoints": {
            "Http": { "Url": "http://*:81" },
            "Https": { "Url": "https://*:82" }
        }
    }


                //string url = Configuration["Url"];
            //app.Urls.Add(url);
            //app.UseKestrel();



        /// <summary>创建字符串的MD5哈希值</summary>
        /// <param name="inputString"></param>
        /// <returns>字符串MD5哈希值的十六进制字符串</returns>
        public static string StringToMD5Hash(string inputString)
        {
            var md5 = MD5.Create(); // new MD5CryptoServiceProvider();
            byte[] encryptedBytes = md5.ComputeHash(Encoding.ASCII.GetBytes(inputString));
            var sb = new StringBuilder();
            for (int i = 0; i < encryptedBytes.Length; i++)
            {
                sb.AppendFormat("{0:x2}", encryptedBytes[i]);
            }
            return sb.ToString();
        }


        //using App.Core;
                    //.Include(u => u.TitleUsers)



                    using System.Drawing.Imaging;
using System.Drawing;
//using AppPlat.Core;
using System.Drawing;

        //[BindProperty]

                    //mainTabStrip.Items.forEach(function(item, index, arr)){
            //    item.close();
            //});




@page
@model App.Pages.Admin.DeptModel
@{
    ViewData["Title"] = "Dept";
}

@section body {
    <f:Grid ID="Grid1" BoxFlex="1" ShowBorder="true" ShowHeader="false" EnableCheckBoxSelect="false" DataIDField="ID" DataTextField="Name" IsViewPort="true"
            EnableSimulateTree="true" DataSource="@Model.Depts">
        <Toolbars>
            <f:Toolbar ID="Toolbar1" Position="Top">
                <Items>
                    <f:Button ID="btnNew" Icon="Add" Text="新增部门" Enabled="@Model.PowerCoreDeptNew"  OnClientClick="onNewClick()"  />
                </Items>
            </f:Toolbar>
        </Toolbars>
        <Columns>
            <f:RowNumberField EnablePagingNumber="true"></f:RowNumberField>
            <f:RenderField EnableColumnHide="false" EnableHeaderMenu="false" Width="38" RendererFunction="renderActionEdit"></f:RenderField>
            <f:RenderField EnableColumnHide="false" EnableHeaderMenu="false" Width="38" RendererFunction="renderActionDelete"></f:RenderField>
            <f:RenderField For="Depts.First().Name" SortField="Name" DataSimulateTreeLevelField="TreeLevel" Width="180"></f:RenderField>
            <f:RenderField For="Depts.First().Remark" SortField="Remark" ExpandUnusedSpace="true"></f:RenderField>
            <f:RenderField For="Depts.First().SortIndex" Width="80"></f:RenderField>
        </Columns>
    </f:Grid>

    <f:Window ID="Window1" IsModal="true" Hidden="true" Target="Top" EnableResize="true" EnableMaximize="true"
        EnableIFrame="true" Width="900" Height="550"
        OnClose="@Url.Handler("Dept_DoPostBack")" OnCloseFields="Grid1" CloseAction="HideRefresh"
        />
    
}


@section script {

    <script>

        var coreDeptEdit = @Convert.ToString(Model.PowerCoreDeptEdit).ToLower();
        var coreDeptDelete = @Convert.ToString(Model.PowerCoreDeptDelete).ToLower();

        function onNewClick(event) {
            F.ui.Window1.show('@Url.Content("~/Admin/DeptNew")', '新增');
        }

        function renderActionEdit(value, params) {
            var imageUrl = '@Url.Content("~/res/icon/pencil.png")';
            var disabledCls = coreDeptEdit ? '' : ' f-state-disabled';
            return '<a class="action-btn edit'+ disabledCls +'" href="javascript:;"><img class="f-grid-cell-icon" src="' + imageUrl + '"></a>';
        }

        function renderActionDelete(value, params) {
            var imageUrl = '@Url.Content("~/res/icon/delete.png")';
            var disabledCls = coreDeptDelete ? '' : ' f-state-disabled';
            return '<a class="action-btn delete'+ disabledCls +'" href="javascript:;"><img class="f-grid-cell-icon" src="' + imageUrl + '"></a>';
        }

        F.ready(function () {

            var grid1 = F.ui.Grid1;
            grid1.el.on('click', 'a.action-btn', function (event) {
                var cnode = $(this);
                var rowData = grid1.getRowData(cnode.closest('.f-grid-row'));

                // 是否禁用
                if(cnode.hasClass('f-state-disabled')) {
                    return;
                }

                if (cnode.hasClass('delete')) {
                    F.confirm({
                        message: '确定删除此记录？',
                        target: '_top',
                        ok: function () {
                            // 触发后台事件
                            F.doPostBack('@Url.Handler("Dept_DoPostBack")', 'Panel1', {
                                actionType: 'delete',
                                deletedRowID: rowData.id
                            });
                        }
                    });
                } else if (cnode.hasClass('edit')) {
                    F.ui.Window1.show('@Url.Content("~/Admin/DeptEdit?id=")' + rowData.id, '编辑');
                }
            });

        });

    </script>
}


            // 如果权限名为空，则放行
            if (string.IsNullOrEmpty(powerName))
                return true;

        [UI("用户", "帮用户修改密码")]      UserChangePassword = 54,

                private static List<Power> GetPowers()
        {
            var powers = new List<Power>
            {
                new Power
                {
                    Name = "CoreUserView",
                    Title = "浏览用户列表",
                    GroupName = "CoreUser"
                },
                new Power
                {
                    Name = "CoreUserNew",
                    Title = "新增用户",
                    GroupName = "CoreUser"
                },
                new Power
                {
                    Name = "CoreUserEdit",
                    Title = "编辑用户",
                    GroupName = "CoreUser"
                },
                new Power
                {
                    Name = "CoreUserDelete",
                    Title = "删除用户",
                    GroupName = "CoreUser"
                },
                new Power
                {
                    Name = "CoreUserChangePassword",
                    Title = "修改用户登陆密码",
                    GroupName = "CoreUser"
                },
                new Power
                {
                    Name = "CoreRoleView",
                    Title = "浏览角色列表",
                    GroupName = "CoreRole"
                },
                new Power
                {
                    Name = "CoreRoleNew",
                    Title = "新增角色",
                    GroupName = "CoreRole"
                },
                new Power
                {
                    Name = "CoreRoleEdit",
                    Title = "编辑角色",
                    GroupName = "CoreRole"
                },
                new Power
                {
                    Name = "CoreRoleDelete",
                    Title = "删除角色",
                    GroupName = "CoreRole"
                },
                new Power
                {
                    Name = "CoreRoleUserView",
                    Title = "浏览角色用户列表",
                    GroupName = "CoreRoleUser"
                },
                new Power
                {
                    Name = "CoreRoleUserNew",
                    Title = "向角色添加用户",
                    GroupName = "CoreRoleUser"
                },
                new Power
                {
                    Name = "CoreRoleUserDelete",
                    Title = "从角色中删除用户",
                    GroupName = "CoreRoleUser"
                },
                new Power
                {
                    Name = "CoreOnlineView",
                    Title = "浏览在线用户列表",
                    GroupName = "CoreOnline"
                },
                new Power
                {
                    Name = "CoreConfigView",
                    Title = "浏览全局配置参数",
                    GroupName = "CoreConfig"
                },
                new Power
                {
                    Name = "CoreConfigEdit",
                    Title = "修改全局配置参数",
                    GroupName = "CoreConfig"
                },
                new Power
                {
                    Name = "CoreMenuView",
                    Title = "浏览菜单列表",
                    GroupName = "CoreMenu"
                },
                new Power
                {
                    Name = "CoreMenuNew",
                    Title = "新增菜单",
                    GroupName = "CoreMenu"
                },
                new Power
                {
                    Name = "CoreMenuEdit",
                    Title = "编辑菜单",
                    GroupName = "CoreMenu"
                },
                new Power
                {
                    Name = "CoreMenuDelete",
                    Title = "删除菜单",
                    GroupName = "CoreMenu"
                },
                new Power
                {
                    Name = "CoreLogView",
                    Title = "浏览日志列表",
                    GroupName = "CoreLog"
                },
                new Power
                {
                    Name = "CoreLogDelete",
                    Title = "删除日志",
                    GroupName = "CoreLog"
                },
                new Power
                {
                    Name = "CoreTitleView",
                    Title = "浏览职务列表",
                    GroupName = "CoreTitle"
                },
                new Power
                {
                    Name = "CoreTitleNew",
                    Title = "新增职务",
                    GroupName = "CoreTitle"
                },
                new Power
                {
                    Name = "CoreTitleEdit",
                    Title = "编辑职务",
                    GroupName = "CoreTitle"
                },
                new Power
                {
                    Name = "CoreTitleDelete",
                    Title = "删除职务",
                    GroupName = "CoreTitle"
                },
                new Power
                {
                    Name = "CoreTitleUserView",
                    Title = "浏览职务用户列表",
                    GroupName = "CoreTitleUser"
                },
                new Power
                {
                    Name = "CoreTitleUserNew",
                    Title = "向职务添加用户",
                    GroupName = "CoreTitleUser"
                },
                new Power
                {
                    Name = "CoreTitleUserDelete",
                    Title = "从职务中删除用户",
                    GroupName = "CoreTitleUser"
                },
                new Power
                {
                    Name = "CoreDeptView",
                    Title = "浏览部门列表",
                    GroupName = "CoreDept"
                },
                new Power
                {
                    Name = "CoreDeptNew",
                    Title = "新增部门",
                    GroupName = "CoreDept"
                },
                new Power
                {
                    Name = "CoreDeptEdit",
                    Title = "编辑部门",
                    GroupName = "CoreDept"
                },
                new Power
                {
                    Name = "CoreDeptDelete",
                    Title = "删除部门",
                    GroupName = "CoreDept"
                },
                new Power
                {
                    Name = "CoreDeptUserView",
                    Title = "浏览部门用户列表",
                    GroupName = "CoreDeptUser"
                },
                new Power
                {
                    Name = "CoreDeptUserNew",
                    Title = "向部门添加用户",
                    GroupName = "CoreDeptUser"
                },
                new Power
                {
                    Name = "CoreDeptUserDelete",
                    Title = "从部门中删除用户",
                    GroupName = "CoreDeptUser"
                },
                new Power
                {
                    Name = "CorePowerView",
                    Title = "浏览权限列表",
                    GroupName = "CorePower"
                },
                new Power
                {
                    Name = "CorePowerNew",
                    Title = "新增权限",
                    GroupName = "CorePower"
                },
                new Power
                {
                    Name = "CorePowerEdit",
                    Title = "编辑权限",
                    GroupName = "CorePower"
                },
                new Power
                {
                    Name = "CorePowerDelete",
                    Title = "删除权限",
                    GroupName = "CorePower"
                },
                new Power
                {
                    Name = "CoreRolePowerView",
                    Title = "浏览角色权限列表",
                    GroupName = "CoreRolePower"
                },
                new Power
                {
                    Name = "CoreRolePowerEdit",
                    Title = "编辑角色权限",
                    GroupName = "CoreRolePower"
                },
                new Power
                {
                    Name = "TestPage1View",
                    Title = "浏览测试页面一",
                    GroupName = "Test"
                },
                new Power
                {
                    Name = "TestPage2View",
                    Title = "浏览测试页面二",
                    GroupName = "Test"
                }
            };

            return powers;
        }
                GetPowers().ForEach(p => context.Powers.Add(p));

                                        var roleIDs = hfSelectedRole.SplitLong();
                        //int[] roleIDs = Components.StringUtil.GetIntArrayFromString(hfSelectedRole);
                        AddEntities2<RoleUser>(roleIDs, CurrentUser.ID);
                    var roleIDs = hfSelectedRole.SplitLong(); //.ToSeparatedString(","); // Components.StringUtil.GetIntArrayFromString(hfSelectedRole);
                    ReplaceEntities2<RoleUser>(item.RoleUsers, roleIDs, item.ID);
                    if (hfSelectedRole.IsNotEmpty())
                    if (hfSelectedDept.IsEmpty())
                    else
                        item.DeptID = ;

                    if (hfSelectedDept.IsNotEmpty())
                        CurrentUser.DeptID = Convert.ToInt32(hfSelectedDept);

                                    //string hfSelectedDept  = values["hfSelectedDept"].ToString();
            //string hfSelectedRole  = values["hfSelectedRole"].ToString();
            //string hfSelectedTitle = values["hfSelectedTitle"].ToString();


                    /// <summary>获取一个角色拥有的权限列表</summary>
        public static Dictionary<Power, bool> GetRolePowers(long roleId)
        {
            Dictionary<Power, bool> powers = new Dictionary<Power, bool>();
            foreach (var item in RolePower.Set.Where(t => t.RoleID == roleId))
            {
                if (!powers.ContainsKey(item.PowerID))
                    powers.Add(item.PowerID, true);
            }
            return powers;
        }

        

    /*
    // https://docs.microsoft.com/en-us/ef/core/modeling/relationships
    // Many-to-many relationships without an entity class to represent the join table are not yet supported.

    public class RolePower : IKey2ID
    {
        public int RoleID { get; set; }
        public Role Role { get; set; }

        public int PowerID { get; set; }
        public Power Power { get; set; }


        [NotMapped]
        public int ID1
        {
            get
            {
                return RoleID;
            }
            set
            {
                RoleID = value;
            }
        }
        [NotMapped]
        public int ID2
        {
            get
            {
                return PowerID;
            }
            set
            {
                PowerID = value;
            }
        }

    }
    */


            /*
        /// <summary>设置角色拥有的权限列表</summary>
        public static void SetRolePowers(long roleId, List<Powers> powers)
        {
            RolePower.Set.Where(t => t.RoleID == roleId).Delete();
            foreach (var power in powers)
            {
                var item = new RolePower() { RoleID = roleId, PowerID = power };
                item.Save();
            }
        }


        /// <summary>查找拥有某个角色的用户</summary>
        public static IQueryable<User> SearchByRole(long roleId)
        {
            var r = GetSearchRoleText(roleId);
            IQueryable<User> q = ValidSet
                .Where(t => t.Roles.Contains(r))
                .OrderBy(t => t.NickName)
                ;
            return q;
        }

        /// <summary>查找拥有某个权限的用户</summary>
        public static List<User> SearchByPower(Powers powerId)
        {
            var roles = RolePower.Search(t => t.PowerID == powerId).Select(t => t.RoleID).ToList();
            var users = new List<User>();
            foreach (var role in roles)
            {
                var us = SearchByRole(role).ToList();
                users = users.Union(us);
            }
            return users;
        }*/

            /*
    // https://docs.microsoft.com/en-us/ef/core/modeling/relationships
    // Many-to-many relationships without an entity class to represent the join table are not yet supported.

    public class RoleUser : IKey2ID
    {
        public int RoleID { get; set; }
        public Role Role { get; set; }

        public int UserID { get; set; }
        public User User { get; set; }


        [NotMapped]
        public int ID1
        {
            get
            {
                return RoleID;
            }
            set
            {
                RoleID = value;
            }
        }
        [NotMapped]
        public int ID2
        {
            get
            {
                return UserID;
            }
            set
            {
                UserID = value;
            }
        }

    }
    */
                        //var viewPower = await DB.Powers
                    //    .Where(p => p.Name == ViewPowerName)
                    //    .FirstOrDefaultAsync();

                    var viewPower = Enum.GetNames(typeof(Power)).FirstOrDefault(t => t == powerName);
                    if (power != null)
                    else
                    {
                        Alert.Show("浏览权限 " + powerName + " 不存在！");
                        return UIHelper.Result();
                    }
                //Role role = await DB.Roles.Include(r => r.RolePowers).Where(r => r.ID == selectedRoleID).FirstOrDefaultAsync();
                //ReplaceEntities2<RolePower>(role.RolePowers, selectedRoleID, selectedPowerIDs);
                //await DB.SaveChangesAsync();
            //nodes[0].Expanded = true; // 展开第一个树节点

                        //AddEntities2<RoleUser>(roleID, selectedRowIDs.ToList());
            //await DB.SaveChangesAsync();
            //grid1UI.DataSource(await RoleUserNew_GetDataAsync(pagingInfo, roleID, ttbSearchMessage), Grid1_fields, clearSelection: false);
            //grid1UI.RecordCount(pagingInfo.RecordCount);


            // 当前选中角色拥有的权限列表
            //Role role = await DB.Roles
            //    .Include(r => r.RolePowers)
            //    .Where(r => r.ID == grid1SelectedRowID).FirstOrDefaultAsync();
            //
            //return new JArray(role.RolePowers.Select(p => p.PowerID)).ToString(Newtonsoft.Json.Formatting.None);


                       // Client side GroupBy is not supported.
            // https://stackoverflow.com/questions/58138556/client-side-groupby-is-not-supported
            // https://stackoverflow.com/questions/60432078/asp-net-core-web-api-client-side-groupby-is-not-supported

            //var q = DB.Powers.GroupBy(p => p.GroupName);
            //if (pagingInfo.SortField == "GroupName")
            //{
            //    if (pagingInfo.SortDirection == "ASC")
            //    {
            //        q = q.OrderBy(g => g.Key);
            //    }
            //    else
            //    {
            //        q = q.OrderByDescending(g => g.Key);
            //    }
            //}
            //var powers = await q.ToListAsync();

            //var powers = (await DB.Powers.ToListAsync()).GroupBy(p => p.GroupName);
            /*
            if (pagingInfo.SortField == "GroupName")
            {
                if (pagingInfo.SortDirection == "ASC")
                    powers = powers.OrderBy(g => g.Key);
                else
                    powers = powers.OrderByDescending(g => g.Key);
            }
            */



            /*
            if (context.Session.GetObject<List<string>>("UserPowerList") == null)
            {
                List<string> rolePowerNames = new List<string>();

                if (GetIdentityName(context) == "admin")
                {
                    // 超级管理员拥有所有权限
                    rolePowerNames = db.Powers.Select(p => p.Name).ToList();
                }
                else
                {
                    List<int> roleIDs = GetIdentityRoleIDs(context);
                    var roles = db.Roles
                        .Include(r => r.RolePowers)
                        .ThenInclude(rp => rp.Power)
                        .Where(r => roleIDs.Contains(r.ID))
                        .ToList();
                    foreach (var role in roles)
                    {
                        foreach (var rolepower in role.RolePowers)
                        {
                            if (!rolePowerNames.Contains(rolepower.Power.Name))
                                rolePowerNames.Add(rolepower.Power.Name);
                        }
                    }
                }

                context.Session.SetObject("UserPowerList", rolePowerNames);
            }
            return context.Session.GetObject<List<string>>("UserPowerList");
            */

                    // http://blog.163.com/zjlovety@126/blog/static/224186242010070024282/
        // http://www.cnblogs.com/gaoshuai/articles/1863231.html
        /// <summary>当前登录用户的角色列表</summary>
        protected List<long> GetIdentityRoleIDs()
        {
            return Auth.GetIdentityRoleIDs(HttpContext);
        }


// 附加实体到数据库上下文中（首先在Local中查找实体是否存在，不存在才Attach，否则会报错）
        // http://patrickdesjardins.com/blog/entity-framework-4-3-an-object-with-the-same-key-already-exists-in-the-objectstatemanager
        protected T Attach<T>(int keyID) where T : class, IKeyID, new()
        {
            T t = DB.Set<T>().Local.Where(x => x.ID == keyID).FirstOrDefault();
            if (t == null)
            {
                t = new T { ID = keyID };
                DB.Set<T>().Attach(t);
            }
            return t;
        }

        
        

        //// 向现有实体集合中添加新项
        //protected void AddEntities<T>(ICollection<T> existItems, int[] newItemIDs) where T : class, IKeyID, new()
        //{
        //    foreach (int roleID in newItemIDs)
        //    {
        //        T t = Attach<T>(roleID);
        //        existItems.Add(t);
        //    }
        //}

        //// 替换现有实体集合中的所有项
        //// http://stackoverflow.com/questions/2789113/entity-framework-update-entity-along-with-child-entities-add-update-as-necessar
        //protected void ReplaceEntities<T>(ICollection<T> existEntities, int[] newEntityIDs) where T : class, IKeyID, new()
        //{
        //    if (newEntityIDs.Length == 0)
        //    {
        //        existEntities.Clear();
        //    }
        //    else
        //    {
        //        int[] tobeAdded = newEntityIDs.Except(existEntities.Select(x => x.ID)).ToArray();
        //        int[] tobeRemoved = existEntities.Select(x => x.ID).Except(newEntityIDs).ToArray();

        //        AddEntities<T>(existEntities, tobeAdded);

        //        existEntities.Where(x => tobeRemoved.Contains(x.ID)).ToList().ForEach(e => existEntities.Remove(e));
        //    }
        //}

        //// http://patrickdesjardins.com/blog/validation-failed-for-one-or-more-entities-see-entityvalidationerrors-property-for-more-details-2
        //// ((System.Data.Entity.Validation.DbEntityValidationException)$exception).EntityValidationErrors



        protected void ReplaceEntities2<T>(List<T> existEntities, long keyID1, List<long> keyID2s) where T : class, IKey2ID, new()
        {
            if (keyID2s.Count == 0)
            {
                existEntities.Clear();
            }
            else
            {
                var tobeAdded = keyID2s.Except(existEntities.Select(x => x.ID2)).ToList();
                var tobeRemoved = existEntities.Select(x => x.ID2).Except(keyID2s).ToList();

                AddEntities2<T>(keyID1, tobeAdded);
                RemoveEntities2<T>(existEntities, null, tobeRemoved);
            }
        }

        protected void ReplaceEntities2<T>(List<T> existEntities, List<long> keyID1s, long keyID2) where T : class, IKey2ID, new()
        {
            if (keyID1s.Count == 0)
            {
                existEntities.Clear();
            }
            else
            {
                var tobeAdded = keyID1s.Except(existEntities.Select(x => x.ID1)).ToList();
                var tobeRemoved = existEntities.Select(x => x.ID1).Except(keyID1s).ToList();

                AddEntities2<T>(tobeAdded, keyID2);
                RemoveEntities2<T>(existEntities, tobeRemoved, null);
            }
        }
        protected void AddEntities2<T>(long keyID1, List<long> keyID2s) where T : class, IKey2ID, new()
        {
            foreach (int id in keyID2s)
            {
                T t = Attach2<T>(keyID1, id);
                DB.Entry(t).State = EntityState.Added;

                //T t = new T { ID1 = keyID1, ID2 = id };
                //existEntities.Add(t);
            }
        }

        protected void AddEntities2<T>(List<long> keyID1s, long keyID2) where T : class, IKey2ID, new()
        {
            foreach (int id in keyID1s)
            {
                T t = Attach2<T>(id, keyID2);
                DB.Entry(t).State = EntityState.Added;

                //T t = new T { ID1 = id, ID2 = keyID2 };
                //existEntities.Add(t);
            }
        }

        protected void RemoveEntities2<T>(List<T> existEntities, List<long> keyID1s, List<long> keyID2s) where T : class, IKey2ID, new()
        {
            List<T> itemsTobeRemoved;
            if (keyID1s == null)
            {
                itemsTobeRemoved = existEntities.Where(x => keyID2s.Contains(x.ID2)).ToList();
            }
            else
            {
                itemsTobeRemoved = existEntities.Where(x => keyID1s.Contains(x.ID1)).ToList();
            }
            itemsTobeRemoved.ForEach(e => existEntities.Remove(e));
        }

        protected T Attach2<T>(long keyID1, long keyID2) where T : class, IKey2ID, new()
        {
            T t = DB.Set<T>().Local.Where(x => x.ID1 == keyID1 && x.ID2 == keyID2).FirstOrDefault();
            if (t == null)
            {
                t = new T { ID1 = keyID1, ID2 = keyID2 };
                DB.Set<T>().Attach(t);
            }
            return t;
        }



        



        //[Display(Name = "所属角色")]
        //public List<Role> Roles { get; set; }
        //[Display(Name = "拥有职称")]
        //public List<Title> Titles { get; set; }

                            //var db = BaseModel.GetDbConnection();
                    //List<Menu> dbMenus = db.Menus.Include(m => m.ViewPower).OrderBy(m => m.SortIndex).ToList();
                    var db = EntityConfig.Db as AppPlatContext;
        //public DbSet<Power> Powers { get; set; }
        //public DbSet<Title> Titles { get; set; }
        //public DbSet<TitleUser> TitleUsers { get; set; }

        
            //modelBuilder.Entity<TitleUser>()
            //    //.ToTable("TitleUsers")
            //    .HasKey(t => new { t.TitleID, t.UserID });
            //modelBuilder.Entity<TitleUser>()
            //    .HasOne(u => u.User)
            //    .WithMany(u => u.TitleUsers)
            //    .HasForeignKey(u => u.UserID);
            //modelBuilder.Entity<TitleUser>()
            //   .HasOne(u => u.Title)
            //   .WithMany(u => u.TitleUsers)
            //   .HasForeignKey(u => u.TitleID);
