#--------------------------------------------
# FineUICore RazorPage
#--------------------------------------------
# 写页面
    <f:Window Width="350" WindowPosition="GoldenSection" EnableClose="false" IsModal="false" Title="登录表单" ID="Window1">
        <Items>
            <f:SimpleForm ShowHeader="false" BodyPadding="10" ShowBorder="false" ID="SimpleForm1">
                <Items>
                    <f:TextBox ShowRedStar="true" Required="true" Label="用户名" ID="tbxUserName"></f:TextBox>
                    <f:TextBox ShowRedStar="true" Required="true" TextMode="Password" Label="密码" ID="tbxPassword"></f:TextBox>
                </Items>
            </f:SimpleForm>
        </Items>
        <Toolbars>
            <f:Toolbar Position="Bottom" ToolbarAlign="Right" ID="Toolbar1">
                <Items>
                    <f:Button Type="Submit" ID="btnLogin" Text="登录" ValidateTarget="Top" ValidateForms="SimpleForm1"
                              OnClick="@Url.Handler("btnLogin_Click")" OnClickFields="SimpleForm1"></f:Button>
                    <f:Button Type="Reset" Text="重置" ID="btnReset"></f:Button>
                </Items>
            </f:Toolbar>
        </Toolbars>
    </f:Window>

# 提交表单
public IActionResult OnPostBtnLogin_Click(IFormCollection values)
{
    if (values["tbxUserName"] == "admin" && values["tbxPassword"] == "admin")
        ShowNotify("成功登录！", MessageBoxIcon.Success);
    else
        ShowNotify("用户名或密码错误！", MessageBoxIcon.Error);
    return UIHelper.Result();
}


# 动态创建
    <f:Form BodyPadding="10" ID="Form2" IsFluid="true" CssClass="blockpanel" EnableCollapse="false" Title="表单" LabelWidth="120" LabelAlign="Top" >
        <Rows>
            <f:FormRow Items="@ViewBag.DynamicItems" />
        </Rows>
    </f:Form>
    public class FormDynamicModel : BaseModel
    {
        public void OnGet()
        {
            InitFormRows();
        }

        private void InitFormRows()
        {
            List<Field> fields = new List<Field>();
            var tbxUser = new TextBox();
            tbxUser.ID = "tbxUserName";
            tbxUser.Text = "";
            tbxUser.Label = "用户名";
            tbxUser.ShowLabel = true;
            tbxUser.ShowRedStar = true;
            tbxUser.Required = true;
            tbxUser.EmptyText = "请输入用户名";
            fields.Add(tbxUser);

            var ddlGender = new FineUICore.DropDownList();
            ddlGender.ID = "ddlGender";
            ddlGender.Label = "性别（回发事件）";
            ddlGender.Items.Add("男", "0");
            ddlGender.Items.Add("女", "1");
            ddlGender.AutoSelectFirstItem = false;
            // 添加后台事件处理函数
            ddlGender.Events.Add(new Event("change", Url.Handler("ddlGender_SelectedIndexChanged"), "ddlGender"));
            fields.Add(ddlGender);

            ViewBag.DynamicItems = fields.ToArray();
        }
        public IActionResult OnPostDdlGender_SelectedIndexChanged(string ddlGender_text)
        {
            ShowNotify("选择的性别：" + ddlGender_text);
            return UIHelper.Result();
        }
        public IActionResult OnPostButton1_Click(string tbxUserName, string ddlGender_text)
        {
            ShowNotify("用户名：" + tbxUserName + "  性别：" + ddlGender_text);
            return UIHelper.Result();
        }
    }


# 回传表单
    指明了回传的控件为Form2，服务器端就可以获取该控件的子属性
        <f:Button ID="Button1"  ValidateForms="Form2" ValidateTarget="Top" Text="验证表单并提交" 
            OnClick="@Url.Handler("Button1_Click")" OnClickFields="Form2"
            />
        public IActionResult OnPostButton1_Click(string tbxUserName, string ddlGender_text)
        {
            ShowNotify("用户名：" + tbxUserName + "  性别：" + ddlGender_text);
            return UIHelper.Result();
        }
    指明回传控件为DropDownList1
        <f:DropDownList ID="DropDownList1" ..../>
        <f:Button ID="btnGetSelection" Text="获取下拉选中项" 
            OnClick="@Url.Handler("btnGetSelection_Click")" 
            OnClickFields="DropDownList1"
            />
        public IActionResult OnPostBtnGetSelection_Click(string DropDownList1, string DropDownList1_text)
        {
            UIHelper.Label("labResult").Text(String.Format("选中项：{0}（值：{1}）", DropDownList1_text, DropDownList1));
            return UIHelper.Result();
        }

# 数据绑定
    <f:DropDownList ID="DropDownList1" DataSource="@ViewBag.DropDownList1DataSource" />
    private void LoadData()
    {
        List<string> strList = new List<string>();
        strList.Add("可选项1");
        strList.Add("可选项2");
        strList.Add("可选项3");
        ViewBag.DropDownList1DataSource = strList;
    }

Grid
    <f:Grid ID="Grid1" IsFluid="true" CssClass="blockpanel" ShowBorder="true" ShowHeader="true" Title="表格" DataIDField="Id" DataTextField="Name" DataSource="@DataSourceUtil.GetDataTable()">
        <Columns>
            <f:RowNumberField />
            <f:RenderField HeaderText="姓名" DataField="Name" Width="100" />
            <f:RenderField HeaderText="性别" DataField="Gender" FieldType="Int" RendererFunction="renderGender" Width="80" />
            <f:RenderField HeaderText="入学年份" DataField="EntranceYear" FieldType="Int" Width="100" />
            <f:RenderCheckField HeaderText="是否在校" DataField="AtSchool" RenderAsStaticField="true" Width="100" />
            <f:RenderField HeaderText="所学专业" DataField="Major" RendererFunction="renderMajor" ExpandUnusedSpace="true" MinWidth="150" />
            <f:RenderField HeaderText="分组" DataField="Group" RendererFunction="renderGroup" Width="80" />
            <f:RenderField HeaderText="注册日期" DataField="LogTime" FieldType="Date" Renderer="Date" RendererArgument="yyyy-MM-dd" Width="100" />
        </Columns>
    </f:Grid>

Grid.Paging
    <f:Grid ID="Grid1" IsFluid="true" CssClass="blockpanel" ShowBorder="true" ShowHeader="true" Title="表格" DataIDField="Id" DataTextField="Name" EnableCheckBoxSelect="true" AllowPaging="true" PageSize="5" IsDatabasePaging="true"
            RecordCount="@Model.DataCount" DataSource="@Model.DataSource" ShowPagingMessage="false" OnPageIndexChanged="@Url.Handler("Grid1_PageIndexChanged")" OnPageIndexChangedFields="Grid1">
        <Columns>
            <f:RowNumberField />
            <f:RenderField HeaderText="姓名" DataField="Name" Width="100" />
            <f:RenderField HeaderText="性别" DataField="Gender" FieldType="Int" RendererFunction="renderGender" Width="80" />
            <f:RenderField HeaderText="入学年份" DataField="EntranceYear" FieldType="Int" Width="100" />
            <f:RenderCheckField HeaderText="是否在校" DataField="AtSchool" RenderAsStaticField="true" Width="100" />
            <f:RenderField HeaderText="所学专业" DataField="Major" RendererFunction="renderMajor" ExpandUnusedSpace="true" MinWidth="150" />
            <f:RenderField HeaderText="分组" DataField="Group" RendererFunction="renderGroup" Width="80" />
            <f:RenderField HeaderText="注册日期" DataField="LogTime" FieldType="Date" Renderer="Date" RendererArgument="yyyy-MM-dd" Width="100" />
        </Columns>
    </f:Grid>
    public class DatabaseModel : BaseModel
    {
        /// <summary>记录数</summary>
        public int DataCount { get; set; }
        public DataTable DataSource { get; set; }
        public void OnGet()
        {
            // 1.设置总项数（特别注意：数据库分页初始化时，一定要设置总记录数RecordCount）
            // 2.获取当前分页数据
            RecordCount = DataSourceUtil.GetTotalCount(); ;
            DataSource = DataSourceUtil.GetPagedDataTable(pageIndex: 0, pageSize: 5, DataCount);
        }
        public IActionResult OnPostGrid1_PageIndexChanged(string[] Grid1_fields, int Grid1_pageIndex)
        {
            var grid1 = UIHelper.Grid("Grid1");
            var recordCount = DataSourceUtil.GetTotalCount();

            // 1.设置总项数（数据库分页回发时，如果总记录数不变，可以不设置RecordCount）
            grid1.RecordCount(recordCount);

            // 2.获取当前分页数据
            var dataSource = DataSourceUtil.GetPagedDataTable(pageIndex: Grid1_pageIndex, pageSize: 5, recordCount: recordCount);
            grid1.DataSource(dataSource, Grid1_fields);
            return UIHelper.Result();
        }
    }




#--------------------------------------------
# Aspnetcore site 演变
#--------------------------------------------
最简示例，开启网站，显示 hello world
    Host.CreateDefaultBuilder()
        .ConfigureWebHost(webHostBuilder => webHostBuilder
            .UseKestrel()
            .UseUrls("http://0.0.0.0:3721;https://0.0.0.0:9527")
            .Configure(app => app.Run(context => context.Response.WriteAsync("Hello World."))))
        .Build()
        .Run()
        ;

配置服务、中间件、MVC
    Host.CreateDefaultBuilder()
        .ConfigureWebHostDefaults(webHostBuilder => webHostBuilder
            .ConfigureServices(servicecs => servicecs
                .AddRouting()
                .AddControllersWithViews())
            .Configure(app => app
                .UseRouting()
                .UseEndpoints(endpoints => endpoints.MapControllers())))
        .Build()
        .Run()
        ;
    public class HelloController
    {
        [HttpGet("/hello")]
        public string SayHello() => "Hello World";
    }

将配置写到单独的类
    Host.CreateDefaultBuilder()
        .ConfigureWebHostDefaults(webHostBuilder => webHostBuilder.UseStartup<Startup>())
        .Build()
        .Run()
        ;
    public class Startup
    {
        public void ConfigureServices(IServiceCollection services) => services
            .AddRouting()
            .AddControllersWithViews()
        ;
        public void Configure(IApplicationBuilder app) => app
            .UseRouting()
            .UseEndpoints(endpoints => endpoints.MapControllers())
        ;
    }


拆分控制器和视图
    ``` 
    public class HelloController : Controller
    {
        [HttpGet("/hello/{name}")]
        public IActionResult SayHello(string name)
        {
            ViewBag.Name = name;
            return View();  // 会去找 /views/hello/SayHello.cshtml
        }
    }
    /views/hello/SayHello.cshtml
    <html>
    <head>
        <title>Hello World</title>
    </head>
    <body>
        <p>Hello, @ViewBag.Name</p>
    </body>
    </html>
    ```








# FineUI 配置代码

```
public static class FineUIServiceExtensions
{
    public static IServiceCollection AddFineUI(this IServiceCollection services, IConfiguration config)
    {
        services.AddSingleton<IHttpContextAccessor, HttpContextAccessor>();
        ConfigSection section = config.GetSection("FineUI").Get<ConfigSection>();
        GlobalConfig.Configure(section);
        return services.AddSingleton((IFineUIService)new FineUIService());
    }
}

public static class FineUIMiddlewareExtensions
{
    public static IApplicationBuilder UseFineUI(this IApplicationBuilder builder)
    {
        PageContext.Configure(builder.ApplicationServices);
        builder.MapWhen((Func<HttpContext, bool>)((HttpContext P_0) => P_0.Request.Path.ToString().EndsWith("res.axd")), (Action<IApplicationBuilder>)delegate(IApplicationBuilder P_0)
        {
            P_0.UseFineUIHandler();
        });
        return builder.UseMiddleware<FineUIMiddleware>(Array.Empty<object>());
    }
}

service.AddFineUI(Configuration);
app.UseFileUI();
```



        /// <summary>
        /// 注册 HttpContextAccessor 单例服务。
        /// 可用 var accessor = app.ApplicationServices.GetRequiredService<IHttpContextAccessor>() 获取上下文对象
        /// </summary>
        //public static void AddHttpContextAccessor(this IServiceCollection services)
        //{
        //    services.AddSingleton<IHttpContextAccessor, HttpContextAccessor>();
        //}


        //---------------------------------------------
        private static EntityConfig _cfg;
        public static EntityConfig Instance
        {
            get
            {
                if (_cfg == null)
                    _cfg = new EntityConfig();
                return _cfg;
            }
        }


未识别 TargetFramework 值“”。可能是因为拼写错误。
如果拼写正确，必须显式指定 TargetFrameworkIdentifier 和/或 TargetFrameworkVersion 属性。




# Codes

```
    public class MyDbContext : DbContext
    {
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            var sqliteConn = new SqliteConnection(@"DataSource = Chinook.db");
            optionsBuilder.UseSqlite(sqliteConn);
        }
    }

    using (var context = new MyDbContext())
    {
        context.Database.EnsureCreated();
    }
```
