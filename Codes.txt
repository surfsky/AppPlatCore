@page
@using System.Text;
@model App.Pages.AI.JewelsModel
@{
    ViewData["Title"] = "Jewels Classfier";
}

@section head {
    <style type="text/css">
        ul.icons {
            list-style-type: none;
            padding: 0;
            margin: 0;
        }
            ul.icons li {
                display: inline-block;
                margin: 0 10px 10px 0;
                text-align: center;
                border-style: solid;
                border-width: 1px;
                padding: 10px 5px;
                width: 150px;
            }
                ul.icons li img {
                    width: 64px;
                    height: 64px;
                }
                ul.icons li .title {
                    margin-top: 10px;
                }
    </style>
}

@section body {

    <f:SimpleForm ID="SimpleForm1" ShowBorder="false" ShowHeader="false" BodyPadding="10" IsViewPort="true" AutoScroll="true">
        <Items>
            <f:Image ID="imgPhoto" CssClass="photo" ImageUrl="~/res/images/blank.png" ShowEmptyLabel="true" Label="图片"  Width="200" />
            <f:FileUpload ID="filePhoto" ShowEmptyLabel="true" ButtonText="上传图片" ButtonOnly="true" ButtonIcon="ImageAdd" OnFileSelected="@Url.Handler("filePhoto_FileSelected")" OnFileSelectedFields="filePhoto,grid" />

            <f:Grid ID="grid" BoxFlex="1" ShowBorder="true" ShowHeader="false" EnableCheckBoxSelect="true"
                    DataIDField="ID" DataTextField="Name"
                    AllowSorting="false" AllowPaging="false"
                    DataSource="@Model.Results">
                <Columns>
                    <f:RowNumberField EnablePagingNumber="true"></f:RowNumberField>
                    <f:RenderField For="Results.First().Label" Width="300" />
                    <f:RenderField For="Results.First().Score" ExpandUnusedSpace="true" />
                </Columns>
            </f:Grid>
            <f:ContentPanel ID="ContentPanel1" BodyPadding="10" ShowBorder="false" ShowHeader="false">
                @{
                    var sb = new StringBuilder();
                    var iconUrl = Url.Content("~/res/images/empty.png");
                    sb.Append("<ul class=\"icons\">");
                    foreach (string icon in Enum.GetNames(typeof(Icon)))
                    {
                        Icon iconType = (Icon)Enum.Parse(typeof(Icon), icon);
                        if (iconType != Icon.None)
                            iconUrl = Url.Content(IconHelper.GetIconUrl(iconType));

                        sb.AppendFormat("<li class=\"f-state-default\"><img src=\"{0}\"/><div class=\"title\">{1}?w=64</div></li>", iconUrl, icon);
                    }
                    sb.Append("</ul>");
                }
                @Html.Raw(sb.ToString());

            </f:ContentPanel>
        </Items>
    </f:SimpleForm>
}


            <f:ContentPanel ID="ContentPanel1" BodyPadding="10" ShowBorder="false" ShowHeader="false">
                @{
                }
                @Html.Raw(sb.ToString());

            </f:ContentPanel>


            
            <f:Grid ID="grid" BoxFlex="1" ShowBorder="true" ShowHeader="false" EnableCheckBoxSelect="true"
                    DataIDField="ID" DataTextField="Name"
                    AllowSorting="false" AllowPaging="false"
                    DataSource="@Model.Results">
                <Columns>
                    <f:RowNumberField EnablePagingNumber="true"></f:RowNumberField>
                    <f:RenderField For="Results.First().Label" Width="300" />
                    <f:RenderField For="Results.First().Score" ExpandUnusedSpace="true" />
                </Columns>
            </f:Grid>
            <f:HyperLink NavigateUrl="" Text="<img src='/res/images/empty.png' />" EncodeText="false" />
            //
            //UIHelper.Grid("grid").DataSource(this.Results, grid_fields);
        public List<PredicateResult> Results{ get; set; }



        ViewBag.btnClientClick2Script


                /// <summary>获取实例的属性名称列表</summary>
        public static string[] GetProperties(object instance)
        {
            var result = new List<string>();
            foreach (PropertyInfo property in instance.GetType().GetProperties(BindingFlags.Instance | BindingFlags.Public))
            {
                var propertyName = property.Name;
                // NotMapped特性
                var notMappedAttr = property.GetCustomAttribute<NotMappedAttribute>(false);
                if (notMappedAttr == null && propertyName != "ID")
                {
                    result.Add(propertyName);
                }
            }
            return result.ToArray();
        }

        
        //protected void InvalidModelState(ModelStateDictionary state)
        //{
        //    System.Text.StringBuilder sb = new System.Text.StringBuilder();
        //    sb.Append("<ul>");
        //    foreach (var key in state.Keys)
        //    {
        //        //将错误描述添加到sb中
        //        foreach (var error in state[key].Errors)
        //        {
        //            sb.AppendFormat("<li>{0}</li>", error.ErrorMessage);
        //        }
        //    }
        //    sb.Append("</ul>");

        //    Alert.Show(sb.ToString());
        //}



                    User user = await DB.Users
                .Include(u => u.RoleUsers)
                .Where(u => u.Name == userName).AsNoTracking().FirstOrDefaultAsync();

            if (user == null)
                Alert.Show("用户名或密码错误！");
            else
            {
                if (PasswordUtil.ComparePasswords(user.Password, password))
                {
                    if (!user.Enabled)
                        Alert.Show("用户未启用，请联系管理员！");
                    else
                    {
                        await Auth.LoginSuccessAsync(user);
                        return RedirectToPage("/Index");
                    }
                }
                else
                {
                    Alert.Show("用户名或密码错误！");
                }
            }

            return UIHelper.Result();


                <script src="~/res/js/jquery-3.4.1.js"></script>


                                    <f:ContentPanel Height="50">
                        <img name="imgVerify" id="imgVerify"
                             width="100" height="39" alt="点击切换" title="点击切换"
                             style="cursor: grab;"
                             src="/HttpApi/Common/VerifyImage"
                             onclick="resetVerifyImg(); return false;" />
                    </f:ContentPanel>

            //var el1 = document.getElementById("imgVerify-inputEl");
            //var el2 = F.ui.imgVerify.getAttrEl();
            //var el3 = F.ui.imgVerify.el;
            //el4.style.cursor = "pointer";
            //el1.addEventListener('click', function () { alert('hello'); });   //resetVerifyImg()
            //el2.addEventListener('click', resetVerifyImg(), true);  // fail
            //el3.addEventListener('click', resetVerifyImg(), true);  // fail
            //$("#imgVerify-inputEl").on('click', resetVerifyImg());

                        //var el1 = document.getElementById("imgVerify-inputEl");
            //var el2 = F.ui.imgVerify.getAttrEl();
            //el2.attr('src', url);
            //el4.attr('src', url);
            //F.ui.imgVerify.getAttrEl().attr('src', url);
            //$("#imgVerify").attr('src', url);
            //$("#imgVerify-inputEl").attr('src', url);


